#include <iostream>
#include <cstring>

using namespace std;

#define TAM_MAX 3

void bubblesort();
void mostrarVet();

struct dados{
	char nome[15];
	int cod;
}typedef dados;

dados pacientes[TAM_MAX];



int main(int argc, char** argv) {
	setlocale(LC_ALL, "");
	
	strcpy(pacientes[0].nome , "jon");
	strcpy(pacientes[1].nome , "alan");
	strcpy(pacientes[2].nome , "ana");
	pacientes[0].cod = 118;
	pacientes[1].cod = 115;
	pacientes[2].cod = 110;
	cout << "Sem Ordenação\n \n";
	mostrarVet();
	cout << "\nCom Ordenação\n";
	bubblesort();
	mostrarVet();	
	
	return 0;
}

void mostrarVet(){
	int i;
	for (i=0; i<TAM_MAX; i++){
		cout << pacientes[i].cod << ":";
		cout << pacientes[i].nome << endl;
	}
}

void bubblesort(){
	dados aux;
	int i, j;
	
	for(i=TAM_MAX - 1; i>0; i--){
		for(j=0; j<i; j++){
			if(pacientes[j].cod > pacientes[j+1].cod){
				aux = pacientes[j];
				pacientes[j] = pacientes[j+1];
				pacientes[j+1] = aux;
			}
				
		}
	}
}

/*
#include 

	#define t 3

	struct Produto {

		int cod;
		float preco;

	};

	void lerVet( struct Produto *p ){

		int i;

		for ( i=0; icod);
			printf("\tPreco? ");
			scanf("%f",&p->preco);
			p++;

		}

	}

	void mostrarVet( struct Produto *p ){

		int i;

		for ( i=0; i < t; i++ ){

			printf("\tCodigo: %d\n",p->cod);
			printf("\tPreco.: %f\n\n",p->preco);
			p++;

		}

	}

	void trocar (struct Produto *pv, int x, int y) {

		struct Produto aux = pv[x];
		pv[x] = pv[y];
		pv[y] = aux; 

	}

	void bubbleSort( struct Produto *p){

		int i, j;

		for ( i=t-1; i > 0; i-- ){
			for ( j=0; j < i; j++ ){

				if ( p[j].cod > p[j+1].cod ) // A comparaÃ§Ã£o Ã© pelo membro cod da struct

					trocar(p, j, j+1);

			}
		

		}

	}


	void main(){

		struct Produto vet[t];
	
		printf("\nDigite o conteudo do vetor:\n");
		lerVet(vet);
		printf("\nConteudo digitado para o vetor:\n");
		mostrarVet(vet);

		printf("\nOrdenando o vetor...\n");
		bubbleSort(vet);

		printf("\nConteudo do vetor ja ordenado:\n");
		mostrarVet(vet);

	}
	*/
